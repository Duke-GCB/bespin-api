# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-12-05 18:49
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


def load_vm_settings(apps, schema_editor):
    """
    Forward migration function to normalize settings out of the JobQuestionnaire and into VMSettings
    :param apps: Django apps
    :param schema_editor: unused
    :return: None
    """
    VMSettings = apps.get_model("data", "VMSettings")
    JobQuestionnaire = apps.get_model("data", "JobQuestionnaire")
    for q in JobQuestionnaire.objects.all():
        settings, _ = VMSettings.objects.get_or_create(vm_flavor=q.vm_flavor,
                                                       vm_project=q.vm_project,
                                                       volume_size_base=q.volume_size_base,
                                                       volume_size_factor=q.volume_size_factor,
                                                       )
        q.vm_settings = settings
        q.save()


class Migration(migrations.Migration):

    dependencies = [
        ('data', '0038_auto_20171106_1623'),
    ]

    operations = [
        migrations.CreateModel(
            name='VMSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volume_size_base', models.IntegerField(default=100, help_text='Base size in GB of for determining job volume size')),
                ('volume_size_factor', models.IntegerField(default=0, help_text='Number multiplied by total staged data size for determining job volume size')),
                ('image_name', models.CharField(help_text='Name of the VM Image to launch', max_length=255)),
                ('ssh_key_name', models.CharField(help_text='Name of SSH key to inject into VM on launch', max_length=255)),
                ('network_name', models.CharField(help_text='Name of network to attach VM to on launch', max_length=255)),
                ('allocate_floating_ips', models.BooleanField(default=False, help_text='Allocate floating IPs to launched VMs')),
                ('floating_ip_pool_name', models.CharField(blank=True, help_text='Name of floating IP pool to allocate from', max_length=255, null=True)),
                ('cwl_base_command', models.TextField(help_text="JSON-encoded base command to run the  image's installed CWL")),
                ('cwl_post_process_command', models.TextField(blank=True, help_text='JSON-encoded base command to run after workflow completes', null=True)),
                ('volume_mounts', models.TextField(blank=True, help_text='JSON-encoded list of volume mounts', null=True)),
                ('vm_flavor', models.ForeignKey(help_text='VM Flavor to use when creating VM instances for this questionnaire', on_delete=django.db.models.deletion.CASCADE, to='data.VMFlavor')),
                ('vm_project', models.ForeignKey(help_text='Project name to use when creating VM instances for this questionnaire', on_delete=django.db.models.deletion.CASCADE, to='data.VMProject')),
            ],
            options={
                'verbose_name_plural': 'VM Settings Collections',
            },
        ),
        # add the vm_settings field with a temporary default
        migrations.AddField(
            model_name='jobquestionnaire',
            name='vm_settings',
            field=models.ForeignKey(default=0,
                                    help_text='Collection of settings to use when launching job VMs for this questionnaire',
                                    on_delete=django.db.models.deletion.CASCADE, to='data.VMSettings'),
            preserve_default=False,
        ),
        # Populate the new model with data from the old model
        migrations.RunPython(load_vm_settings),
        # Remove the default value
        migrations.AlterField(
            model_name='jobquestionnaire',
            name='vm_settings',
            field=models.ForeignKey(
                help_text='Collection of settings to use when launching job VMs for this questionnaire',
                on_delete=django.db.models.deletion.CASCADE, to='data.VMSettings'),
        ),
        migrations.RemoveField(
            model_name='jobquestionnaire',
            name='vm_flavor',
        ),
        migrations.RemoveField(
            model_name='jobquestionnaire',
            name='vm_project',
        ),
        migrations.RemoveField(
            model_name='jobquestionnaire',
            name='volume_size_base',
        ),
        migrations.RemoveField(
            model_name='jobquestionnaire',
            name='volume_size_factor',
        ),
    ]
